{"version":3,"sources":["AppContext.tsx","Navbar.tsx","lib/api.ts","DestinationCard.tsx","components/DiveMarker.tsx","lib/utils.ts","components/DiveMap.tsx","components/ErrorBoundary.js","DestinationList.tsx","About.jsx","distance.js","MapPage.tsx","components/DiveSiteSelect.tsx","components/DiveLogForm.tsx","components/DiveLogsList.tsx","components/CardRight.tsx","DiveLogsPage.tsx","components/ErrorView.tsx","App.tsx","serviceWorker.js","index.js"],"names":["DEFAULT_STATE","user","undefined","hasError","AppContext","React","createContext","Navbar","state","active","logout","_callee","regenerator_default","a","wrap","_context","prev","next","_this","context","updateUser","stop","closeMenu","setState","_this2","this","react_default","createElement","className","id","role","aria-label","style","paddingLeft","paddingRight","href","concat","aria-expanded","data-target","onClick","e","preventDefault","aria-hidden","backgroundColor","react_router_dom","to","Component","contextType","loadJson","_x","_loadJson","apply","arguments","_callee3","path","options","resp","data","error","errorData","_args3","_context3","length","headers","fetch","sent","ok","json","abrupt","t0","statusText","Error","getCountries","_getCountries","_callee5","params","paramsObj","_args5","_context5","page_size","URLSearchParams","toString","getCities","_getCities","_callee6","_args6","_context6","country_name","results","map","datum","diveSiteParser","divesite","min_temp_by_month","JSON","parse","max_temp_by_month","meta","getDiveSites","_x6","_getDiveSites","_callee8","query","queryObj","_context8","getDiveLogs","_getDiveLogs","_callee10","_context10","getCookie","name","cookieValue","document","cookie","cookies","split","i","trim","substring","decodeURIComponent","createDiveLog","_x8","_createDiveLog","_callee11","diveLog","csrftoken","errors","formikError","_context11","Headers","append","method","body","stringify","status","Object","keys","forEach","key","Note","updateNote","_updateNote","asyncToGenerator","mark","_ref","diveSiteId","content","Content-Type","Authorization","access_token","_x9","getNote","_getNote","_callee2","_ref2","_context2","methods","_x10","DestinationCard","_textarea","props","site","value","prevProps","event","console","log","autoFocus","placeholder","ref","c","onNoteSave","bind","disabled","tempData","maxTemps","minTemps","minTemp","maxTemp","push","x","y","city_name","victory_chart","height","victory_axis","tickValues","tickFormat","dependentAxis","fixLabelOverlap","victory_line","DiveFlag","zoom","color","diameter","text","children","_ref$clickHandler","clickHandler","size","calculateMarkerSize","data-tooltip","width","borderRadius","display","flexDirection","alignContent","cursor","boxShadow","border","textAlign","flexGrow","position","textShadow","fontWeight","left","calculateMeterPerPixel","lat","Math","cos","PI","pow","timeout","googleMapStyle","mapStyle","NO_CLUSTER_ZOOM_THRESHOLD","withRouter","locations","centerCoord","setActiveLocation","activeSite","onGoogleApiLoaded","activeSiteCountry","activeSiteCity","defaultZoom","autoZoom","location","history","onClickUpdate","_useState","useState","_useState2","slicedToArray","dbScanRadiusKM","updateDbScanRadius","lng","meanBy","hasLocationQuery","_querystring$parse","querystring","search","Number","features","loc","turf","collection","properties","assign","dbscan","clusters","groupBy","noises","filter","feature","cluster","Fragment","zIndex","background","top","lib_default","styles","bootstrapURLKeys","defaultCenter","hoverDistance","yesIWantToUseGoogleMapApiInternals","maps","bounds","LatLngBounds","setCenter","setZoom","diveSite","extend","fitBounds","getZoom","addListener","clearTimeout","setTimeout","_map$getCenter","getCenter","replace","pathname","clusterRadiusKM","cg","names","slice","join","geometry","coordinates","DiveMarker","String","point","DestinationList_","_ref3","breadcrumb","isLoading","destinations","locationType","hasMore","loadMoreHandler","components_DiveMap","DestinationList","country","setIsLoading","_useState3","_useState4","setDestinations","_useState5","_useState6","setNext","useEffect","alert","DestinationList_DestinationList_","urlObj","url","newList","URL","origin","About","GithubCorner_default","svgStyle","target","rel","distance","lat1","lon1","lat2","lon2","unit","radlat1","radlat2","theta","radtheta","dist","sin","acos","effectiveLat","effectiveZoom","setActiveSite","radius","searchCircle","setSearchCircle","diveSites","setDiveSites","setSearchCircleFromMap","center","toJSON","bound","getBounds","latDist","west","east","lngDist","north","south","min","updateDiveSites","_updateDiveSites","include_location","right","src_DestinationCard","DiveSiteSelect","handleChange","searchTimeout","setSearchTimeout","type","onChange","newTimeout","result","keyword","d","DiveLogForm","onSubmitted","onCanceled","formik_esm","initialValues","date","Date","toISOString","divesite_id","rating","notes","onSubmit","values","setErrors","setSubmitting","_x2","data-display-mode","data-is-range","data-close-on-select","htmlFor","components_DiveSiteSelect","DiveLogsList","diveLogs","city","CardRight","DiveLogsPage","setDiveLogs","isCreate","setIsCreate","components_CardRight","components_DiveLogForm","window","reload","components_DiveLogsList","ErrorView","DestinationListPage","src_DestinationList","match","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","localStorage","setItem","info","src_Navbar","components_ErrorView","Provider","objectSpread","react_router","exact","render","component","MapPage","Boolean","hostname","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f09e533.chunk.js","sourcesContent":["import React from 'react';\r\nimport { IUser } from './lib/api'\r\n\r\nexport const DEFAULT_STATE = {\r\n    user: undefined,\r\n    hasError: false\r\n}\r\nexport const AppContext = React.createContext<{ user?: IUser }>(DEFAULT_STATE)\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { AppContext } from \"./AppContext\";\r\n\r\nclass Navbar extends React.Component {\r\n  static contextType = AppContext;\r\n  state = {\r\n    active: false\r\n  };\r\n\r\n  logout = async () => {\r\n    // await auth.logout(this.context.user.access_token);\r\n    this.context.updateUser(null);\r\n  };\r\n\r\n  closeMenu = () => {\r\n    this.setState({ active: false });\r\n  };\r\n\r\n  render() {\r\n    // const { user } = this.context\r\n    return (\r\n      <nav\r\n        className=\"navbar is-dark\"\r\n        id=\"nav\"\r\n        role=\"navigation\"\r\n        aria-label=\"main navigation\"\r\n        style={{ paddingLeft: 10, paddingRight: 10 }}\r\n      >\r\n        <div className=\"navbar-brand\">\r\n          <a href=\"/\" className=\"navbar-item\">\r\n            <div className=\"title tooltip\" style={{ paddingRight: 20 }}>\r\n              Reefbase\r\n            </div>\r\n          </a>\r\n          <a\r\n            href=\"/\"\r\n            role=\"button\"\r\n            className={`navbar-burger burger ${\r\n              this.state.active ? \"is-active\" : \"\"\r\n            }`}\r\n            aria-label=\"menu\"\r\n            aria-expanded=\"false\"\r\n            data-target=\"navbarBasicExample\"\r\n            onClick={e => {\r\n              e.preventDefault();\r\n              this.setState({ active: !this.state.active });\r\n            }}\r\n          >\r\n            <span aria-hidden=\"true\" />\r\n            <span aria-hidden=\"true\" />\r\n            <span aria-hidden=\"true\" />\r\n          </a>\r\n        </div>\r\n        <div\r\n          className={`navbar-menu ${this.state.active ? \"is-active\" : \"\"}`}\r\n          style={{\r\n            backgroundColor: \"rgba(0,0,0,0)\"\r\n          }}\r\n        >\r\n          <div className=\"navbar-start\">\r\n            <Link className=\"navbar-item\" onClick={this.closeMenu} to=\"/about\">\r\n              About\r\n            </Link>\r\n            {/* <Link\r\n              className=\"navbar-item\"\r\n              onClick={this.closeMenu}\r\n              to=\"/destinations\"\r\n            >\r\n              Destinations\r\n            </Link> */}\r\n            <Link\r\n              className=\"navbar-item\"\r\n              onClick={this.closeMenu}\r\n              to=\"/destinations/map\"\r\n            >\r\n              Map\r\n            </Link>\r\n          </div>\r\n          {/* {user != null ?\r\n                        <div className=\"navbar-end\">\r\n                            <a href=\"/\" className=\"navbar-item\">{user.username}</a>\r\n                            <a className=\"navbar-item\" onClick={this.logout}>Logout</a>\r\n                        </div>\r\n                        :\r\n                        <div className=\"navbar-end\">\r\n                            <Link className=\"navbar-item\" to=\"/login\">Login</Link>\r\n                        </div>\r\n                    } */}\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import { Primitive } from \"lodash\";\r\n\r\n// import { number } from \"prop-types\";\r\n\r\nexport interface IUser {\r\n  id: number;\r\n  username: string;\r\n  access_token: string;\r\n}\r\n\r\nexport interface ILocation {\r\n  id: number;\r\n  name: string;\r\n  lat: number;\r\n  lng: number;\r\n}\r\n\r\nexport interface ICity extends ILocation {\r\n  divesite_set?: IDiveSite[];\r\n  zoom_level: number;\r\n  country_name?: string;\r\n}\r\n\r\nexport interface IDiveSite extends ILocation {\r\n  id: number;\r\n  lat: number;\r\n  lng: number;\r\n  name: string;\r\n  country_name?: string;\r\n  city_name?: string;\r\n  min_temp?: number;\r\n  max_temp?: number;\r\n  min_temp_by_month?: number[];\r\n  max_temp_by_month?: number[];\r\n}\r\n\r\nexport interface INote {\r\n  id: number;\r\n  content: string;\r\n}\r\n\r\nexport interface IUser {\r\n  id: number;\r\n  access_token: string;\r\n  username: string;\r\n}\r\n\r\nexport interface APIResults<T> {\r\n  count: number;\r\n  next: string | null;\r\n  previous: string | null;\r\n  results: T[];\r\n}\r\n\r\nexport interface IDiveLog {\r\n  date: string;\r\n  user_id?: number; // some times can use session instead\r\n  divesite_id: number;\r\n  time?: string;\r\n  observations?: string;\r\n  meta?: string;\r\n  rating?: number\r\n}\r\n\r\n// export enum LocationTypeEnum {\r\n//   cities = 'cities',\r\n//   countries = 'countries'\r\n// }\r\n\r\nexport async function loadJson(path: string, options: any = {}) {\r\n  if (options.headers == null) {\r\n    options.headers = {};\r\n  }\r\n\r\n  options.headers[\"Content-Type\"] = \"application/json\";\r\n\r\n  const resp = await fetch(path, options);\r\n  if (resp.ok) {\r\n    const data = await resp.json();\r\n    return data;\r\n  }\r\n\r\n  let error = \"\";\r\n  try {\r\n    const errorData = await resp.json();\r\n    error = errorData.error;\r\n  } catch (e) {\r\n    error = resp.statusText;\r\n  }\r\n  throw new Error(error);\r\n}\r\n\r\nasync function loadAuthJson(\r\n  path: string,\r\n  accessToken: string,\r\n  options: any = {}\r\n) {\r\n  if (options.headers == null) {\r\n    options.headers = {};\r\n  }\r\n  options.headers[\"Authorization\"] = `Bearer ${accessToken}`;\r\n  return loadJson(path, options);\r\n}\r\n\r\nexport async function getCountries(\r\n  params: { page_size: string } = { page_size: \"200\" }\r\n): Promise<APIResults<ICity>> {\r\n  const paramsObj = new URLSearchParams(params);\r\n  return loadJson(`/api/countries?${paramsObj.toString()}`);\r\n}\r\n\r\nexport async function getCities(\r\n  params: { country_name: string; page_size: string } = {\r\n    country_name: \"Thailand\",\r\n    page_size: \"10\"\r\n  }\r\n): Promise<APIResults<ICity>> {\r\n  const paramsObj = new URLSearchParams(params);\r\n  const data = await loadJson(`/api/cities?${paramsObj.toString()}`);\r\n  data.results = data.results.map((datum: ICity) => {\r\n    datum.country_name = params.country_name;\r\n    return datum;\r\n  });\r\n  return data;\r\n}\r\n\r\nexport async function getDestination(\r\n  country_name: string,\r\n  city_name: string\r\n): Promise<APIResults<ICity>> {\r\n  const paramsObj = new URLSearchParams({\r\n    country_name,\r\n    city_name,\r\n    include_divesites: \"true\"\r\n  });\r\n  const data = await loadJson(`/api/cities?${paramsObj.toString()}`);\r\n  if (data.results.length > 0) {\r\n    data.results = data.results.map((result: ICity) => {\r\n      if (result.divesite_set == null) return result;\r\n      result.divesite_set = result.divesite_set.map((datum: IDiveSite) => {\r\n        datum = diveSiteParser(datum)\r\n        datum.country_name = country_name;\r\n        datum.city_name = city_name;\r\n        return datum;\r\n      });\r\n      return result;\r\n    });\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\nfunction diveSiteParser(divesite: any) {\r\n  divesite.min_temp_by_month = JSON.parse(divesite.min_temp_by_month)\r\n  divesite.max_temp_by_month = JSON.parse(divesite.max_temp_by_month)\r\n  divesite.meta = JSON.parse(divesite.meta)\r\n  return divesite\r\n}\r\n\r\nexport async function getDiveSites(query?: any): Promise<APIResults<IDiveSite>> {\r\n  const queryObj = new URLSearchParams(query);\r\n  const results = await loadJson(\"/api/divesites?\" + queryObj.toString());\r\n  results.results = results.results.map(diveSiteParser)\r\n  return results\r\n}\r\n\r\nexport async function getDiveSite(id: number | string): Promise<IDiveSite> {\r\n  const diveSite = await loadJson('/api/divesites/' + id)\r\n  return diveSiteParser(diveSite)\r\n}\r\n\r\nexport async function getDiveLogs(){\r\n  return loadJson('/api/divelogs')\r\n}\r\n\r\n\r\n\r\nfunction getCookie(name: string) {\r\n  var cookieValue = null;\r\n  if (document.cookie && document.cookie !== '') {\r\n      var cookies = document.cookie.split(';');\r\n      for (var i = 0; i < cookies.length; i++) {\r\n          var cookie = cookies[i].trim();\r\n          // Does this cookie string begin with the name we want?\r\n          if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n              break;\r\n          }\r\n      }\r\n  }\r\n  return cookieValue;\r\n}\r\nexport async function createDiveLog(diveLog: IDiveLog) {\r\n  const csrftoken = getCookie('csrftoken') || ''\r\n  const headers = new Headers()\r\n  headers.append('Content-Type', 'application/json')\r\n  headers.append('X-CSRFToken', csrftoken)\r\n  const options: RequestInit = { \r\n    method: 'POST',\r\n    body: JSON.stringify(diveLog),\r\n    headers\r\n  }\r\n  const resp = await fetch('/api/divelogs/', options)\r\n\r\n  if (resp.ok) {\r\n    const data = await resp.json()\r\n    return data\r\n  }\r\n\r\n  if (resp.status == 400) {\r\n    const errors = await resp.json()\r\n    const formikError:any = {}\r\n    Object.keys(errors).forEach((key) => {\r\n      formikError[key] = errors[key][0]\r\n    })\r\n    return { errors: formikError }\r\n  }\r\n  // handle other errors\r\n}\r\n\r\nexport const Note = {\r\n  async updateNote({\r\n    diveSiteId,\r\n    user,\r\n    content\r\n  }: {\r\n    diveSiteId: number;\r\n    user: IUser;\r\n    content: string;\r\n  }): Promise<void> {\r\n    const headers = {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${user.access_token}`\r\n    };\r\n    const body = JSON.stringify({ content });\r\n    const data = await loadJson(\r\n      `/api/notes/divesites/${diveSiteId}/users/${user.id}`,\r\n      {\r\n        method: \"POST\",\r\n        headers,\r\n        body\r\n      }\r\n    );\r\n    return data;\r\n  },\r\n  async getNote({\r\n    diveSiteId,\r\n    user\r\n  }: {\r\n    diveSiteId: number;\r\n    user: IUser;\r\n  }): Promise<string> {\r\n    const headers = {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${user.access_token}`\r\n    };\r\n    const data = await loadJson(\r\n      `/api/notes/divesites/${diveSiteId}/users/${user.id}`,\r\n      { headers, methods: \"POST\" }\r\n    );\r\n    if (data == null) {\r\n      return \"\";\r\n    }\r\n    return data.content;\r\n  }\r\n};\r\n\r\n\r\n","import React from \"react\";\r\nimport { IDiveSite, Note } from \"./lib/api\";\r\nimport { AppContext } from \"./AppContext\";\r\nimport { VictoryLine, VictoryChart, VictoryAxis } from \"victory\";\r\n\r\ninterface IDestinationCardProps {\r\n  site: IDiveSite;\r\n}\r\n\r\nclass DestinationCard extends React.Component<IDestinationCardProps, any> {\r\n  static contextType = AppContext;\r\n  _textarea: any;\r\n\r\n  async syncNote() {\r\n    const diveSiteId = this.props.site.id;\r\n    const content = await Note.getNote({ diveSiteId, user: this.context.user });\r\n    this._textarea.value = content;\r\n  }\r\n\r\n  async componentWillMount() {\r\n    if (this.context.user == null) return;\r\n    // await this.syncNote()\r\n  }\r\n\r\n  async componentDidUpdate(prevProps: any) {\r\n    // if (\r\n    //   this.props.site != null &&\r\n    //   prevProps.site != null &&\r\n    //   this.props.site.id !== prevProps.site.id\r\n    // ) {\r\n    //   this._textarea.value = \"\";\r\n      // this.syncNote()\r\n    // }\r\n  }\r\n\r\n  async onNoteSave(event: any) {\r\n    const diveSiteId = this.props.site.id;\r\n    // TODO: check result and feedback UI\r\n    await Note.updateNote({\r\n      diveSiteId,\r\n      user: this.context.user,\r\n      content: this._textarea.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { site } = this.props;\r\n    console.log(site);\r\n    if (site == null) {\r\n      return (\r\n        <div>\r\n          <h2 className=\"title is-two\">No Dive Site Selected!</h2>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    let textarea;\r\n    if (this.context.user != null) {\r\n      textarea = (\r\n        <div className=\"full-height\">\r\n          <textarea\r\n            autoFocus={true}\r\n            className=\"textarea borderless\"\r\n            placeholder=\"Take notes here.\"\r\n            ref={c => (this._textarea = c)}\r\n          />\r\n          <button className=\"button\" onClick={this.onNoteSave.bind(this)}>\r\n            submit\r\n          </button>\r\n        </div>\r\n      );\r\n    } else {\r\n      textarea = (\r\n        <div>\r\n          <textarea\r\n            className=\"textarea borderless\"\r\n            placeholder=\"Notes coming soon!\"\r\n            // placeholder=\"Please login to take notes\"\r\n            ref={c => (this._textarea = c)}\r\n            disabled\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const tempData: any[] = [];\r\n    const maxTemps: any[] = [];\r\n    const minTemps: any[] = [];\r\n    if (site.min_temp_by_month != null && site.max_temp_by_month != null) {\r\n      site.min_temp_by_month.forEach((minTemp, i) => {\r\n        // @ts-ignore\r\n        const maxTemp = site.max_temp_by_month[i];\r\n        tempData.push({ minTemp, maxTemp });\r\n        maxTemps.push({ x: i, y: maxTemp });\r\n        minTemps.push({ x: i, y: minTemp });\r\n      });\r\n    }\r\n\r\n    console.log(maxTemps);\r\n    return (\r\n      <div>\r\n        <h2 className=\"title is-two\">{site.name}</h2>\r\n        <h3 className=\"subtitle is-four\">\r\n          {site.city_name}, {site.country_name}\r\n        </h3>\r\n        <VictoryChart height={200}>\r\n          <VictoryAxis\r\n            tickValues={[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]}\r\n            tickFormat={[\r\n              \"Jan\",\r\n              \"\",\r\n              \"\",\r\n              \"Apr.\",\r\n              \"\",\r\n              \"\",\r\n              \"July\",\r\n              \"\",\r\n              \"\",\r\n              \"Oct\",\r\n              \"\",\r\n              \"\"\r\n            ]}\r\n          />\r\n          <VictoryAxis\r\n            dependentAxis\r\n            fixLabelOverlap\r\n            //   tickFormat={(x) => (`${x `)}\r\n          />\r\n          <VictoryLine data={maxTemps} x=\"x\" y=\"y\" />\r\n          <VictoryLine data={minTemps} x=\"x\" y=\"y\" />\r\n        </VictoryChart>\r\n        {/* { textarea } */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DestinationCard;\r\n","import React, { ReactChild } from 'react';\r\nimport { IDiveSite } from '../lib/api'\r\n\r\nfunction calculateMarkerSize(zoom: any) {\r\n    // return 10\r\n    if (zoom == null) return 5;\r\n    // console.log(5*zoom/9)\r\n    let size = 10 * zoom/10 + 1;\r\n    if (size > 20) size = 20\r\n    return size\r\n}\r\n\r\ninterface DiveFlagProps {\r\n  site: IDiveSite;\r\n  lat: number;\r\n  lng: number;\r\n  zoom?: any;\r\n  clickHandler?: (site: IDiveSite) => void;\r\n  color?: string;\r\n  diameter?: number;\r\n  text?: string;\r\n  children?: ReactChild\r\n}\r\nconst DiveFlag = ({\r\n  site,\r\n  zoom,\r\n  color,\r\n  diameter,\r\n  text,\r\n  children,\r\n  clickHandler = () => {}\r\n}: DiveFlagProps) => {\r\n  if (color == null) {\r\n    color = 'red'\r\n  }\r\n\r\n  if (diameter == null) {\r\n    diameter = calculateMarkerSize(zoom)\r\n  }\r\n\r\n  return (\r\n    <div className=\"tooltip\" data-tooltip={site.name}\r\n      style={{\r\n        height: diameter,\r\n        width: diameter,\r\n        backgroundColor: color,\r\n        borderRadius: \"50%\",\r\n        display: \"flex\",\r\n        flexDirection: 'column',\r\n        alignContent: 'center',\r\n        cursor: 'pointer',\r\n        boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.25)',\r\n        border: '1px solid white'\r\n      }}\r\n      onClick={() => clickHandler(site)}\r\n    >\r\n      <span\r\n        style={{\r\n          color: 'white', \r\n          textAlign: 'center',\r\n          width: '100%',\r\n          flexGrow: 1\r\n        }}\r\n      >{text}</span>\r\n      <span\r\n        style={{\r\n          position: 'relative',\r\n          textShadow: '-1px 0 white, 0 1px white, 1px 0 white, 0 -1px white',\r\n          fontWeight: 500,\r\n          left: diameter + 5\r\n        }}\r\n      >{children}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DiveFlag","\r\nexport function calculateMeterPerPixel(lat:number, zoom:number) {\r\n    // console.log(lat, zoom)\r\n    // console.log(Math.cos(lat * Math.PI / 180))\r\n    // console.log(Math.pow(2,zoom))\r\n    const meterPerPixel = 156543.03392 * Math.cos(lat * Math.PI / 180) / Math.pow(2, zoom)\r\n    return meterPerPixel\r\n  }\r\n","import React, { useState, useEffect } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport GoogleMapReact, { ClickEventValue } from 'google-map-react';\r\nimport {getDestination, ILocation, ICity} from '../lib/api'\r\nimport DiveMarker from './DiveMarker'\r\nimport { meanBy, groupBy, flatMap } from 'lodash-es';\r\nimport mapStyle from './google_map_style.json'\r\nimport * as H from 'history'\r\nimport * as querystring from 'query-string'\r\nimport * as turf from '@turf/turf'\r\nimport { calculateMeterPerPixel } from '../lib/utils'\r\n\r\ninterface Props {\r\n    locations: ILocation[], \r\n    centerCoord?: { lat: number, lng: number},\r\n    activeSite?: ILocation,\r\n    setActiveLocation?: (site?: ILocation)=>void,\r\n    activeSiteCountry?: string,\r\n    activeSiteCity?: string,\r\n    onClickUpdate?: () => void;\r\n    onGoogleApiLoaded?: ({ map , maps }: { map: any, maps: any }) => void\r\n    defaultZoom?: number,\r\n    autoZoom?: boolean,\r\n    children?: React.ReactNode,\r\n    location: H.Location,\r\n    history: H.History\r\n\r\n}\r\n\r\nconst googleMapStyle = mapStyle;\r\nconst NO_CLUSTER_ZOOM_THRESHOLD = 10;\r\n\r\nvar timeout: any;\r\nfunction DiveMap({ \r\n        locations, \r\n        centerCoord,\r\n        activeSite,\r\n        setActiveLocation,\r\n        activeSiteCountry,\r\n        activeSiteCity,\r\n        onGoogleApiLoaded,\r\n        defaultZoom,\r\n        autoZoom,\r\n        children,\r\n        location,\r\n        history,\r\n        onClickUpdate\r\n    } : Props ) {\r\n\r\n    const [dbScanRadiusKM, updateDbScanRadius] = useState(0.01)\r\n\r\n\r\n    if (centerCoord == null) centerCoord = { lat: 0, lng: 0 }\r\n\r\n    if (autoZoom === true && locations.length > 0) {\r\n        const lat = meanBy(locations, 'lat')\r\n        const lng = meanBy(locations, 'lng')\r\n        centerCoord = { lat, lng }\r\n    }\r\n\r\n    var hasLocationQuery = false\r\n    const { lat, lng, zoom } = querystring.parse(location.search)\r\n    if (lat != null && lng != null && zoom != null)  {\r\n        centerCoord.lat = Number(lat)\r\n        centerCoord.lng = Number(lng)\r\n        hasLocationQuery = true\r\n    }\r\n\r\n    const features = locations.map(loc => {\r\n      return turf.point([loc.lat, loc.lng], loc)\r\n    })\r\n    \r\n    // default to noise before clustering\r\n    let collection = { \r\n      features: locations.map(loc => {\r\n        const properties = Object.assign({}, loc, { dbscan: 'noise' })\r\n        return {\r\n          properties\r\n        }\r\n      })\r\n    }\r\n    if (dbScanRadiusKM > 0) {\r\n      //@ts-ignore\r\n      collection = turf.clustersDbscan(\r\n        turf.featureCollection(features),\r\n        dbScanRadiusKM \r\n      )\r\n    }\r\n    // @ts-ignore\r\n    const clusters = groupBy(collection.features, 'properties.cluster')\r\n    console.log({ clusters })\r\n    const noises = collection.features.filter((feature: any) => \r\n      feature.properties.cluster == null\r\n    )\r\n    return (\r\n      <>\r\n      { onClickUpdate != null &&\r\n        <div className=\"container is-fluid\">\r\n          <div className=\"columns\">\r\n            <div className=\"column is-two-fifths\" />\r\n            <div className=\"column is-one-fifths\">\r\n              <div className=\"tile box is-vertical\" id=\"main-content\">\r\n                <button\r\n                  className=\"button\"\r\n                  style={{\r\n                    zIndex: 10,\r\n                    border: \"none\",\r\n                    background: \"rgba(21,60,106,0.9)\",\r\n                    color: \"white\"\r\n                  }}\r\n                  onClick={() => onClickUpdate()}\r\n                >\r\n                  Redo Search Current Area\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <div className=\"column is-two-fifths\" />\r\n          </div>\r\n        </div>\r\n      }\r\n        <div>\r\n          <div\r\n            style={{\r\n              height: \"100vh\",\r\n              width: \"100%\",\r\n              position: \"fixed\",\r\n              top: 0\r\n            }}\r\n          >\r\n            {locations != null && (\r\n              <GoogleMapReact\r\n                options={{ styles: googleMapStyle }}\r\n                bootstrapURLKeys={{\r\n                  key: \"AIzaSyCaxeoUHkl2GK3sKFaNvLfoRWMTm0EbzK0\"\r\n                }}\r\n                defaultCenter={centerCoord}\r\n                defaultZoom={(zoom && Number(zoom)) || defaultZoom}\r\n                hoverDistance={5}\r\n                yesIWantToUseGoogleMapApiInternals\r\n                onGoogleApiLoaded={({ map, maps }) => {\r\n                  if (autoZoom === true && hasLocationQuery === false) {\r\n                    const bounds = new maps.LatLngBounds();\r\n\r\n                    if (locations.length == 1) {\r\n                        map.setCenter(locations[0])\r\n                        map.setZoom(8)\r\n                    } else {\r\n                        locations.forEach(diveSite => {\r\n                        bounds.extend({\r\n                            lat: diveSite.lat,\r\n                            lng: diveSite.lng\r\n                        });\r\n                        });\r\n                        map.fitBounds(bounds);\r\n                        const zoom = map.getZoom()\r\n                        if (zoom > 12) map.setZoom(8)\r\n                    }\r\n                  }\r\n\r\n                  if (onGoogleApiLoaded != null) {\r\n                    onGoogleApiLoaded({ map, maps });\r\n                  }\r\n\r\n                  map.addListener(\"bounds_changed\", () => {\r\n                    // @ts-ignore\r\n                    clearTimeout(timeout);\r\n                    timeout = setTimeout(() => {\r\n                      const { lat, lng } = map.getCenter();\r\n                      const zoom = map.getZoom();\r\n                      const search = querystring.stringify({\r\n                        zoom,\r\n                        lat: lat(),\r\n                        lng: lng()\r\n                      });\r\n                      history.replace(location.pathname + \"?\" + search);\r\n\r\n                      const meterPerPixel = calculateMeterPerPixel(lat(), zoom)\r\n                      const clusterRadiusPixel = 10\r\n                      let clusterRadiusKM = meterPerPixel * clusterRadiusPixel / 1000\r\n                      if (zoom > NO_CLUSTER_ZOOM_THRESHOLD) {\r\n                        clusterRadiusKM = 0\r\n                      }\r\n                      updateDbScanRadius(clusterRadiusKM)\r\n                    }, 500);\r\n                  });\r\n                }}\r\n              >\r\n                {\r\n                  Object.keys(clusters)\r\n                  .filter((key) => key != 'undefined')\r\n                  .map((key: string) => {\r\n                    const cluster: any[] = clusters[key]\r\n                    const collection = turf.featureCollection(cluster)\r\n                    // const bbox = turf.bbox(collection)\r\n                    // const bboxPolygon = turf.bboxPolygon(bbox)\r\n                    // console.log({ bbox, bboxPolygon })\r\n\r\n                    //@ts-ignore\r\n                    const cg = turf.centerOfMass(collection)\r\n                    let names = cluster.map((feature) => {\r\n                      return feature.properties.name\r\n                    })\r\n                    if (names.length > 5) {\r\n                      names = names.slice(0,5)\r\n                      names.push('...')\r\n                    }\r\n                    const site = {\r\n                      name: names.join(', '),\r\n                      lat: cg.geometry.coordinates[0],\r\n                      lng: cg.geometry.coordinates[1],\r\n                      id: -1\r\n                    }\r\n                    return <DiveMarker\r\n                      site={site}\r\n                      zoom={zoom}\r\n                      key={key}\r\n                      lat={site.lat}\r\n                      lng={site.lng}\r\n                      //@ts-ignore\r\n                      text={String(cluster.length)}\r\n                      diameter={20}\r\n                    />\r\n\r\n                  })\r\n                }\r\n                {noises.map((point:any) => {\r\n\r\n                  const site = point.properties\r\n                  let text = ''\r\n                  let color = 'red'\r\n                  if (site.dbscan == 'noise' || site.dbscan == 'edge') {\r\n                    color='green'\r\n                  }\r\n\r\n                  if (zoom != null && zoom > NO_CLUSTER_ZOOM_THRESHOLD) {\r\n                    text = site.name\r\n                  }\r\n\r\n                  return <DiveMarker\r\n                    zoom={zoom}\r\n                    key={site.id}\r\n                    lat={site.lat}\r\n                    lng={site.lng}\r\n                    color={color}\r\n                    site={site}\r\n                    clickHandler={() => {\r\n                      if (setActiveLocation != null)\r\n                        setActiveLocation(site)\r\n                    }}\r\n                  >{text}</DiveMarker>\r\n                })}\r\n                  {children}\r\n              </GoogleMapReact>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n}\r\n\r\n//@ts-ignore\r\nexport default withRouter(DiveMap);\r\n","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = { hasError: false };\r\n    }\r\n  \r\n    static getDerivedStateFromError(error) {\r\n      // Update state so the next render will show the fallback UI.\r\n      return { hasError: true };\r\n    }\r\n  \r\n    componentDidCatch(error, info) {\r\n      // You can also log the error to an error reporting service\r\n      console.log(error, info);\r\n    }\r\n  \r\n    render() {\r\n      if (this.state.hasError) {\r\n        // You can render any custom fallback UI\r\n        return <h1>Something went wrong.</h1>;\r\n      }\r\n  \r\n      return this.props.children; \r\n    }\r\n  }\r\n\r\nexport default ErrorBoundary","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { getCountries, getCities, ICity, loadJson } from \"./lib/api\";\r\nimport DiveMap from \"./components/DiveMap\";\r\n\r\nconst Level = (props: any) => <div className=\"level\">{props.children}</div>;\r\n\r\nfunction DestinationList(props: {\r\n  locationType: string;\r\n  country?: string;\r\n  history: any;\r\n}) {\r\n  const { locationType, country, history } = props;\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [destinations, setDestinations] = useState<ICity[]>([]);\r\n  const [next, setNext] = useState(null as string | null);\r\n\r\n  let breadcrumb = [{ name: \"Countries\", href: \"/destinations\" }];\r\n  if (country != null) {\r\n    breadcrumb.push({\r\n      name: country,\r\n      href: `/destinations/${country}`\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    (async function() {\r\n      try {\r\n        let data = null;\r\n        if (locationType === \"countries\") {\r\n          data = await getCountries();\r\n        } else {\r\n          data = await getCities({\r\n            country_name: String(props.country),\r\n            page_size: \"200\"\r\n          });\r\n        }\r\n        setNext(data.next);\r\n        setDestinations(data.results);\r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        alert(error);\r\n      }\r\n    })();\r\n  }, [locationType, props.country]);\r\n\r\n  return (\r\n    <DestinationList_\r\n      history={history}\r\n      breadcrumb={breadcrumb}\r\n      isLoading={isLoading}\r\n      destinations={destinations}\r\n      locationType={locationType}\r\n      hasMore={next != null}\r\n      loadMoreHandler={async () => {\r\n        if (next == null) return;\r\n        const urlObj = new URL(next);\r\n        // fix different host in development\r\n        const url = urlObj.href.replace(urlObj.origin, \"\");\r\n\r\n        const data = await loadJson(url);\r\n        data.results = data.results.map((datum: ICity) => {\r\n          datum.country_name = country;\r\n          return datum;\r\n        });\r\n\r\n        const newList = destinations.concat(data.results);\r\n        setDestinations(newList);\r\n        setNext(data.next);\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\n\r\n\r\ninterface IBreadcrumb {\r\n  href: string;\r\n  name: string;\r\n}\r\n\r\nexport const DestinationList_ = ({\r\n  breadcrumb,\r\n  isLoading,\r\n  destinations,\r\n  locationType,\r\n  hasMore,\r\n  loadMoreHandler,\r\n  history\r\n}: {\r\n  breadcrumb: IBreadcrumb[];\r\n  isLoading: boolean;\r\n  destinations: ICity[];\r\n  locationType: string;\r\n  hasMore: boolean;\r\n  loadMoreHandler: Function;\r\n  history: any\r\n}) => {\r\n  return (\r\n    <div>\r\n      {destinations.length > 0 && (\r\n        <DiveMap\r\n          locations={destinations}\r\n          activeSite={undefined}\r\n          activeSiteCountry={\"\"}\r\n          activeSiteCity={\"\"}\r\n          setActiveLocation={(location: any) => {\r\n              if (locationType == 'countries') {\r\n                  history.push(`/destinations/${location.name}`)\r\n              } else {\r\n                  history.push(`/destinations/${location.country_name}/${location.name}`)\r\n              }\r\n          }}\r\n          autoZoom={true}\r\n          defaultZoom={8}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DestinationList;\r\n","import React from 'react'\r\nimport GithubCorner from 'react-github-corner';\r\n\r\nconst About = () =>\r\n    <div className=\"section\">\r\n        <GithubCorner \r\n            svgStyle={{\r\n                top: 50\r\n            }}\r\n            href=\"https://github.com/harin/reefbase\"\r\n        />\r\n        <div className=\"container\">\r\n            <div className=\"columns\">\r\n                <div className=\"column is-half is-offset-one-quarter\">\r\n                    <h2 className=\"title is-2\">About</h2>\r\n                    <p>The goal of <a href=\"/\" className=\"has-text-weight-bold\">Reefbase</a> is to be a place where scuba divers can collect information about a dive site before, during, and after a diving trip.</p><br />\r\n                    <p>Currently, the application is in development mode, so things will change and data could get lost.</p><br />\r\n                    <p>The dive site geo GPS coordinate are from <a href=\"http://divesites.com\" target=\"_blank\" rel=\"noopener noreferrer\">divesites.com</a></p><br />\r\n                    <p>Created by <a href=\"https://harinsang.com\" target=\"_blank\" rel=\"noopener noreferrer\">Harin Sanghirun</a>.</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\nexport default About\r\n","//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\r\n//:::                                                                         :::\r\n//:::  This routine calculates the distance between two points (given the     :::\r\n//:::  latitude/longitude of those points). It is being used to calculate     :::\r\n//:::  the distance between two locations using GeoDataSource (TM) prodducts  :::\r\n//:::                                                                         :::\r\n//:::  Definitions:                                                           :::\r\n//:::    South latitudes are negative, east longitudes are positive           :::\r\n//:::                                                                         :::\r\n//:::  Passed to function:                                                    :::\r\n//:::    lat1, lon1 = Latitude and Longitude of point 1 (in decimal degrees)  :::\r\n//:::    lat2, lon2 = Latitude and Longitude of point 2 (in decimal degrees)  :::\r\n//:::    unit = the unit you desire for results                               :::\r\n//:::           where: 'M' is statute miles (default)                         :::\r\n//:::                  'K' is kilometers                                      :::\r\n//:::                  'N' is nautical miles                                  :::\r\n//:::                                                                         :::\r\n//:::  Worldwide cities and other features databases with latitude longitude  :::\r\n//:::  are available at https://www.geodatasource.com                         :::\r\n//:::                                                                         :::\r\n//:::  For enquiries, please contact sales@geodatasource.com                  :::\r\n//:::                                                                         :::\r\n//:::  Official Web site: https://www.geodatasource.com                       :::\r\n//:::                                                                         :::\r\n//:::               GeoDataSource.com (C) All Rights Reserved 2018            :::\r\n//:::                                                                         :::\r\n//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\r\n\r\nfunction distance(lat1, lon1, lat2, lon2, unit) {\r\n\tif ((lat1 == lat2) && (lon1 == lon2)) {\r\n\t\treturn 0;\r\n\t}\r\n\telse {\r\n\t\tvar radlat1 = Math.PI * lat1/180;\r\n\t\tvar radlat2 = Math.PI * lat2/180;\r\n\t\tvar theta = lon1-lon2;\r\n\t\tvar radtheta = Math.PI * theta/180;\r\n\t\tvar dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\r\n\t\tif (dist > 1) {\r\n\t\t\tdist = 1;\r\n\t\t}\r\n\t\tdist = Math.acos(dist);\r\n\t\tdist = dist * 180/Math.PI;\r\n\t\tdist = dist * 60 * 1.1515;\r\n\t\tif (unit==\"K\") { dist = dist * 1.609344 }\r\n\t\tif (unit==\"N\") { dist = dist * 0.8684 }\r\n\t\treturn dist;\r\n\t}\r\n}\r\n\r\nexport default distance","import React, { useState, useEffect } from \"react\";\r\nimport DiveMap from \"./components/DiveMap\";\r\nimport DestinationCard from './DestinationCard';\r\nimport distance from \"./distance\";\r\nimport { getDiveSite, getDiveSites, IDiveSite } from \"./lib/api\";\r\nimport * as querystring from 'query-string'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { calculateMeterPerPixel } from './lib/utils'\r\n\r\n\r\n// interface BubbleProps {\r\n//   diveSite: IDiveSite;\r\n// }\r\n\r\n// const MapBubbleContent = (props: BubbleProps) => {\r\n//   const { diveSite } = props\r\n\r\n//   const [isLoading, setIsLoading] = useState(false)\r\n//   const [fullSiteInfo, setFullSiteInfo] = useState({} as IDiveSite)\r\n\r\n//   useEffect(() => {\r\n//     (async () => {\r\n//       setIsLoading(true)\r\n//       const fullSite: IDiveSite = await getDiveSite(diveSite.id)\r\n//       setIsLoading(false)\r\n//       setFullSiteInfo(fullSite)\r\n//     })()\r\n//   }, [diveSite])  \r\n\r\n//   return (\r\n//     <div\r\n//       style={{\r\n//         display: 'flex',\r\n//         flexDirection: 'column',\r\n//       }}\r\n//     >\r\n//       <h3 \r\n//         style={{ flex: 0 }}\r\n//         className=\"title is-4\">{diveSite.name}</h3>\r\n//       <div className={isLoading ? 'is-loading' : ''}\r\n//         style={{\r\n//           height: '100%',\r\n//           flex: '1 0 auto'\r\n//         }} \r\n//       >\r\n\r\n//       </div>\r\n//     </div>\r\n//   )\r\n// }\r\n\r\n\r\n\r\nconst MapPage = function(props: any) {\r\n  const { location } = props;\r\n  const { lat, lng, zoom } = querystring.parse(location.search)\r\n\r\n  const effectiveLat = Number(lat) || 26.5293775 //florida\r\n  const effectiveZoom = Number(zoom) || 10\r\n\r\n  const [activeSite, setActiveSite] = useState(null as any)\r\n  const [searchCircle, setSearchCircle] = useState({\r\n    lat: effectiveLat,\r\n    lng: Number(lng || -82.8939276),\r\n    radius: calculateMeterPerPixel(effectiveLat, effectiveZoom)\r\n  });\r\n  const [diveSites, setDiveSites] = useState([] as IDiveSite[]);\r\n\r\n  function setSearchCircleFromMap(map: any) {\r\n    const center = map.getCenter().toJSON();\r\n    const bound = map.getBounds().toJSON();\r\n    const latDist = distance(bound.west, 0, bound.east, 0, \"K\");\r\n    const lngDist = distance(0, bound.north, 0, bound.south, \"K\");\r\n    const radius = Math.min(latDist, lngDist);\r\n    center.radius = radius;\r\n    setSearchCircle(center);\r\n  }\r\n\r\n  function onLoad({ map, maps }: { map: any; maps: any }) {\r\n    setSearchCircleFromMap(map);\r\n\r\n    map.addListener(\"dragend\", () => setSearchCircleFromMap(map));\r\n    map.addListener(\"zoom_changed\", () => setSearchCircleFromMap(map));\r\n    map.addListener(\"click\", () => setActiveSite(undefined))\r\n  }\r\n\r\n  async function updateDiveSites() {\r\n    const query = Object.assign({}, searchCircle) as any;\r\n    query.page_size = 100;\r\n    query.include_location = \"true\";\r\n\r\n    const data = await getDiveSites(query);\r\n \r\n    setDiveSites(data.results);\r\n  }\r\n\r\n  useEffect(() => {\r\n    (async function() {\r\n      updateDiveSites();\r\n    })();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n    <DiveMap\r\n      locations={diveSites}\r\n      activeSite={activeSite}\r\n      centerCoord={{ lat: searchCircle.lat, lng: searchCircle.lng }}\r\n      activeSiteCountry={\"\"}\r\n      activeSiteCity={\"\"}\r\n      setActiveLocation={(activeSite: any) => setActiveSite(activeSite)}\r\n      onGoogleApiLoaded={onLoad}\r\n      onClickUpdate={() => updateDiveSites()}\r\n      defaultZoom={8}\r\n    >\r\n      {/* { activeSite &&\r\n          //@ts-ignore\r\n          <div\r\n            className='speech-bubble'\r\n            lat={activeSite.lat} \r\n            lng={activeSite.lng}\r\n            style={{\r\n              background: 'white',\r\n              padding: '10px',\r\n              borderRadius: '10px',\r\n              width: 300,\r\n              height: 200,\r\n              position: 'relative',\r\n              top: -230,\r\n              left: -145,\r\n              boxShadow: '0px 4px 30px rgba(0, 0, 0, 0.10)',\r\n              cursor: 'default',\r\n              pointerEvents: 'all'\r\n            }}\r\n          >\r\n             <MapBubbleContent diveSite={activeSite} />\r\n          </div>\r\n\r\n        } */}\r\n     \r\n    </DiveMap>\r\n     {activeSite != null && (\r\n      <section className=\"section\" id=\"content\">\r\n        <div className=\"container is-fluid\">\r\n          <div className=\"columns\">\r\n            <div className=\"column is-three-quarters\" />\r\n            <div className=\"column\">\r\n              <div className=\"tile box is-vertical\" id=\"main-content\">\r\n                <span\r\n                  className=\"icon\"\r\n                  style={{\r\n                    position: \"absolute\",\r\n                    right: 15,\r\n                    cursor: \"pointer\",\r\n                    color: \"#363636\"\r\n                  }}\r\n                  onClick={() => setActiveSite(undefined)}\r\n                >\r\n                  <i className=\"far fa-times-circle\" />\r\n                </span>\r\n                <DestinationCard site={activeSite} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(MapPage);\r\n","import React, { useState } from \"react\";\r\nimport { IDiveSite, APIResults } from '../lib/api'\r\n\r\nconst SEARCH_TIMEOUT_MS = 500\r\n\r\nconst DiveSiteSelect = ({\r\n  handleChange,\r\n  getDiveSites,\r\n  name\r\n}: {\r\n  name: string;\r\n  handleChange: (e: React.ChangeEvent<any>) => void;\r\n  getDiveSites: (query?: any) => Promise<APIResults<IDiveSite>>;\r\n}) => {\r\n\r\n  const [diveSites, setDiveSites] = useState([] as IDiveSite[])\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [searchTimeout, setSearchTimeout] = useState()\r\n\r\n  return (\r\n    <div className=\"control has-icons left\">\r\n        <input type=\"text\" \r\n            onChange={(e) => {\r\n              const value = e.target.value\r\n              clearTimeout(searchTimeout)\r\n              const newTimeout = setTimeout(async () => {\r\n                if (isLoading) return\r\n                setIsLoading(true)\r\n                const result = await getDiveSites({\r\n                    keyword: value\r\n                })\r\n                setIsLoading(false)\r\n                setDiveSites(result.results)\r\n              }, SEARCH_TIMEOUT_MS)\r\n              setSearchTimeout(newTimeout)\r\n            }}\r\n            placeholder='Search Dive Site by Name'\r\n        />\r\n      <div className=\"select\">\r\n        <select\r\n          name={name}\r\n          onChange={handleChange}\r\n        >\r\n          {diveSites.map((d: any) => (\r\n            <option key={d.id} value={d.id}>{d.name}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <span className=\"icon is-left\">\r\n        <i className=\"fas fa-globe\" />\r\n      </span> \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DiveSiteSelect;\r\n","import React, { useState } from \"react\";\r\nimport { sortBy } from \"lodash-es\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport DiveSiteSelect from './DiveSiteSelect'\r\nimport { IDiveSite, APIResults, createDiveLog } from '../lib/api'\r\n\r\ninterface Props {\r\n  getDiveSites: (q?: any) => Promise<APIResults<IDiveSite>>;\r\n  onSubmitted?: Function,\r\n  onCanceled?: () => void\r\n}\r\n\r\nconst DiveLogForm = (props: Props) => {\r\n  const { \r\n    getDiveSites,\r\n    onSubmitted,\r\n    onCanceled\r\n  } = props;\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        date: new Date().toISOString().substring(0, 10),\r\n        divesite_id: 1,\r\n        meta: undefined,\r\n        rating: undefined,\r\n        notes: undefined\r\n      }}\r\n      onSubmit={async (values, { setSubmitting, setErrors }) => {\r\n        // if (values.divesite_id == null) return;\r\n        // values.divesite_id = Number(values.divesite_id)\r\n        const result = await createDiveLog(values);\r\n        if (result.errors) {\r\n          setErrors(result.errors);\r\n        } else {\r\n          if (onSubmitted != null) onSubmitted()\r\n        }\r\n      }}\r\n    >\r\n      {(props: any) => {\r\n        const { errors, handleChange } = props;\r\n        return (\r\n          <Form>\r\n\r\n            <div className=\"field\">\r\n              <label className=\"label\">Date</label>\r\n              <div className=\"control\">\r\n                <Field\r\n                  name=\"date\"\r\n                  type=\"date\"\r\n                  data-display-mode=\"inline\"\r\n                  data-is-range=\"true\"\r\n                  data-close-on-select=\"false\"\r\n                />\r\n              </div>\r\n              <ErrorMessage name=\"date\" />\r\n            </div>\r\n            <div className=\"field\">\r\n              <label className=\"label\" htmlFor=\"\">\r\n                Time\r\n              </label>\r\n              <div className=\"control\">\r\n                <Field\r\n                  type=\"time\"\r\n                  data-display-mode=\"inline\"\r\n                  data-is-range=\"true\"\r\n                  data-close-on-select=\"false\"\r\n                />\r\n                <ErrorMessage name=\"time\" />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"field\">\r\n              <label className=\"label\">Dive Site</label>\r\n              <div className=\"control\">\r\n                <DiveSiteSelect\r\n                  name={'divesite_id'}\r\n                  getDiveSites={getDiveSites}\r\n                  handleChange={handleChange}\r\n                />\r\n                <ErrorMessage name=\"divesite_id\" />\r\n              </div>\r\n            </div>\r\n            <div className=\"field\">\r\n              <label className=\"label\">Notes</label>\r\n              <div className=\"control\">\r\n                <textarea className=\"textarea\" name=\"notes\" />\r\n                <ErrorMessage name=\"notes\" />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"field\">\r\n              <label className=\"label\">Meta</label>\r\n              <div className=\"control\">\r\n                <textarea className=\"textarea\" name=\"meta\" />\r\n                {errors.meta}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"field\">\r\n              <label className=\"label\">Rating</label>\r\n              <div className=\"control\">\r\n                <Field type=\"number\" name=\"rating\" />\r\n                <ErrorMessage name=\"rating\" />\r\n              </div>\r\n            </div>\r\n            <div className=\"field is-grouped\">\r\n              <div className=\"control\">\r\n                <button className=\"button is-primary\">Create</button>\r\n              </div>\r\n              <div className=\"control\">\r\n                <button className=\"button is-text\" onClick={(e) => {\r\n                  e.preventDefault()\r\n                  if (onCanceled != null) onCanceled()\r\n                }}>Cancel</button>\r\n              </div>\r\n            </div>\r\n            <pre>{JSON.stringify(props, null, 2)}</pre>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default DiveLogForm;\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    diveLogs: any[]\r\n}\r\n\r\nconst DiveLogsList = ({ diveLogs }: Props) => {\r\n\r\n    return (\r\n      <ul>\r\n        {diveLogs.map((diveLog: any) => (\r\n          <li key={diveLog.id} className=\"card\">\r\n            <div className=\"card-header-title\">\r\n              <div className=\"columns\" style={{flexGrow:'inherit'}}>\r\n                <div className=\"column is-two-thirds\">\r\n                  <div className=\"title is-size-6\">\r\n                    {diveLog.divesite.name}\r\n                  </div>\r\n                  <div className=\"subtitle is-size-7\">\r\n                    {diveLog.divesite.city.name},{\" \"}\r\n                    {diveLog.divesite.city.country.name}\r\n                  </div>\r\n                </div>\r\n                <div className=\"column is-one-thirds is-size-7 has-text-right\">\r\n                    <div>{diveLog.date}</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* <pre>{JSON.stringify(diveLog, null ,2)} */}\r\n\r\n            {/* </pre> */}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    );\r\n}\r\n\r\nexport default DiveLogsList","import React, { ReactChildren } from 'react';\r\n\r\n\r\nconst CardRight = ({ children }: { children: React.ReactNode }) => \r\n    <section className=\"section\">\r\n        <div className=\"container is-fluid\">\r\n            <div className=\"columns\">\r\n                <div className=\"column is-three-quarters\"></div>\r\n                <div className=\"column\">\r\n                    <div className=\"tile box is-vertical\" id=\"main-content\">\r\n                        {children}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </section>\r\n\r\nexport default CardRight","import React, { useState, useEffect } from 'react';\r\nimport DiveLogForm from './components/DiveLogForm'\r\nimport DiveLogsList from './components/DiveLogsList'\r\nimport CardRight from './components/CardRight'\r\nimport DiveMap from './components/DiveMap'\r\nimport { meanBy } from 'lodash-es'\r\n\r\nimport { getDiveSites, getDiveLogs} from './lib/api'\r\n\r\nexport const DiveLogsPage = () => {\r\n    const [diveLogs, setDiveLogs ] = useState([] as any[])\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [isCreate, setIsCreate] = useState(false)\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            setIsLoading(true)\r\n            const result = await getDiveLogs()\r\n            setIsLoading(false)\r\n            setDiveLogs(result.results)\r\n        })()\r\n    }, [])\r\n\r\n    let lat = 0\r\n    let lng = 0\r\n    if (diveLogs.length > 0) {\r\n      lat = meanBy(diveLogs, (d) => d.divesite.lat)\r\n      lng = meanBy(diveLogs, (d) => d.divesite.lng)\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <DiveMap\r\n          locations={diveLogs.map(d => d.divesite)}\r\n          defaultZoom={8}\r\n          centerCoord={{ lat, lng }}\r\n          autoZoom={true}\r\n        >\r\n          <CardRight>\r\n            {isCreate ? (\r\n\r\n              <DiveLogForm\r\n                getDiveSites={getDiveSites}\r\n                onSubmitted={() => window.location.reload()}\r\n                onCanceled={() => setIsCreate(false)}\r\n              />\r\n            ) : (\r\n              <>\r\n              <button\r\n              className=\"button\"\r\n              onClick={() => {\r\n                setIsCreate(!isCreate);\r\n              }}\r\n            >\r\n              + New Log\r\n            </button>\r\n              <DiveLogsList diveLogs={diveLogs} />\r\n              </>\r\n\r\n            )}\r\n          </CardRight>\r\n        </DiveMap>\r\n      </>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default DiveLogsPage\r\n","import React from 'react';\r\n\r\nconst ErrorView = () => {\r\n    return (\r\n        <section className=\"hero\">\r\n            <div className=\"hero-body\">\r\n                <div className=\"container\">\r\n                    Something went wrong!\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default ErrorView","import React from \"react\";\nimport \"./App.scss\";\nimport '../node_modules/bulma-extensions/bulma-calendar/dist/js/bulma-calendar'\nimport Navbar from \"./Navbar\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch\n} from \"react-router-dom\";\nimport Destination from \"./Destination\";\nimport DestinationList from \"./DestinationList\";\nimport About from \"./About.jsx\";\nimport MapPage from \"./MapPage\";\nimport DiveLogsPage from './DiveLogsPage'\nimport ErrorView from './components/ErrorView'\nimport { AppContext, DEFAULT_STATE } from \"./AppContext\";\nimport { IUser } from \"./lib/api\";\n\nfunction DestinationPage(props: any) {\n  return <Destination {...props} />;\n}\n\nfunction DestinationListPage(props: any) {\n  const pathname = props.location.pathname;\n  if (pathname === \"/destinations\") {\n    return <DestinationList \n      locationType=\"countries\" \n      history={props.history}\n    />;\n  }\n  return (\n    <DestinationList\n      locationType=\"cities\"\n      country={props.match.params.country}\n      history={props.history}\n    />\n  );\n}\n\nclass App extends React.Component {\n  state = DEFAULT_STATE;\n  constructor(props: any) {\n    super(props);\n   \n  }\n\n  static getDerivedStateFromError(error: any) {\n    return { hasError: true }\n  }\n\n  componentDidCatch(error: any, info: any) {\n    this.setState({ error })\n  }\n\n  updateUser = (user: IUser | null) => {\n    this.setState({ user });\n    localStorage.setItem(\"user\", JSON.stringify(user));\n  };\n\n  render() {\n\n    if (this.state.hasError) {\n      return (\n        <>\n          <Navbar />\n          <ErrorView />\n        </>\n      )\n    }\n\n    return (\n      <AppContext.Provider\n        value={{\n          ...this.state,\n          updateUser: this.updateUser\n        }}\n      >\n        <Router>\n          <div>\n            <Navbar />\n            <Route\n              exact\n              path=\"/\"\n              render={() => <Redirect to=\"/destinations/map\" />}\n            />\n            <Route path=\"/about/\" component={About} />\n            <Route\n              path=\"/destinations/\"\n              exact\n              component={DestinationListPage}\n            />\n            <Switch>\n              <Route path=\"/destinations/map\" exact component={MapPage} />\n              {/* <Route\n                path=\"/destinations/:country\"\n                exact\n                component={DestinationListPage}\n              />\n              <Route\n                path=\"/destinations/:country/:city\"\n                exact\n                component={DestinationPage}\n              /> */}\n              <Route\n                path='/divelogs'\n                component={DiveLogsPage}\n              />\n              <Route\n                path='/divelogs/create'\n                component={DiveLogsPage}\n              />\n            </Switch>\n          </div>\n        </Router>\n      </AppContext.Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('page'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}